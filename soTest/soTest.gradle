import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.StringEscapeUtils
import java.security.MessageDigest
import java.security.NoSuchAlgorithmException
import java.util.zip.CRC32
import java.util.zip.CheckedOutputStream
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

apply plugin: 'com.didichuxing.tools.droidassist'


rootProject.subprojects { sub ->
    android {
        packagingOptions {
            doNotStrip "*/arm64-v8a/libdyso.so"
        }
    }
}

droidAssistOptions {
    config file("../soTest/SoAssist.xml")//插件配置文件(必选配置,支持多配置文件)
}

gradle.taskGraph.afterTask {
    String taskName = it.name
    if (isMergeNativeLibs(taskName)) {
        // 如果是进入到了这边则将mergeXxxxNativeLibs已执行完毕
        ArrayList<SoInfo.SoInfoItem> newList = new ArrayList<SoInfo.SoInfoItem>()
        newList.clear()
        SoInfo oldSoInfo = parseSoJsonFile()
        String abi = project.android.defaultConfig.ndk.abiFilters.toString().replaceAll("\\[", "").replaceAll("]", "")
        String buildType = toLowerCaseFirstOne(taskName.replaceAll("merge", "").replaceAll("NativeLibs", ""))

        // 获取在编译期间临时存放so库的路径
        String soPath = appDirPath + "/build/intermediates/merged_native_libs/$buildType/out/lib/$abi"
        // 获取文件目录下的所有so，并解析出对应的信息
        File dirFile = new File(soPath)
        if (!dirFile.exists()) {
            return
        }
        for (File file : dirFile.listFiles()) {
            newList.add(parseSoInfo(file))
        }

        // 1、如果这次编译没有so库，那么创建一个空信息的json放在assets下 ,当前任务结束
        if (newList.isEmpty()) {
            writeJsonToAssets(null, abi, buildType)
            return
        }
        newList.forEach({ newItem ->
            def isNewOrUpdate = true
            oldSoInfo.list.forEach({ oldItem ->
                if (newItem.name == oldItem.name) {
                    if (newItem.md5 == oldItem.md5) { // 如果md5不等，则表示需要上传了，并且还需要标记
                        isNewOrUpdate = false
                        newItem.url = oldItem.url
                        newItem.version = oldItem.version
                    } else {
                        newItem.version = oldItem.version + 1
                    }
                }
            })
            if (isNewOrUpdate) { //如果文件是新增的或是有更新则上传
                // 这边需要将so文件上传，并获取url，但是由于这个是单机，因此只将它手动拷贝到指定目录下
                newItem.url = "这个是上传oss之后获取的地址"
            }
            // 上传完成之后，将so库删除
            def tmp = file(getAppDirPath() + "/build/intermediates/merged_native_libs/$buildType/out/lib/$abi/lib${newItem.name}.so")
            tmp.delete()
        })
        writeJsonToAssets(newList, abi, buildType)
    }
}


/**
 * 判断当前的task是否是mergeXxxxNativeLibs
 * @param name
 * @return
 */
static boolean isMergeNativeLibs(String name) {
    return name.contains("merge") && name.contains("NativeLibs")
}

/**
 * 解析并生成so的相关信息
 * @param file
 */
SoInfo.SoInfoItem parseSoInfo(File file) {
    SoInfo.SoInfoItem soInfo = new SoInfo.SoInfoItem()
    soInfo.name = file.name.replaceFirst("lib", "").replace(".so", "")
    soInfo.md5 = getFileMd5(file)
    soInfo.size = file.size()
    return soInfo
}

/**
 * 获取文件的md5
 * @param file
 * @return
 */
static String getFileMd5(File file) {
    MessageDigest md = null
    try {
        md = MessageDigest.getInstance("MD5")
    } catch (NoSuchAlgorithmException e) {
        return ""
    }
    file.eachByte 1024, {
        bytes, size -> md.update(bytes, 0, size)
    }
    md.digest().collect { String.format "%02x", it }.join()
}


/**
 * 解析放在assets目录下的soInfo.json文件
 */
SoInfo parseSoJsonFile() {
    String jsonFilePath = appDirPath + "/src/main/assets/SoInfo.json"
    File jsonFile = new File(jsonFilePath)
    if (!jsonFile.exists()) { // 如果不存在或者是一个目录的话则创建一个新的对象返回回去
        jsonFile.createNewFile()
        return new SoInfo()
    }
    def line = jsonFile.readLines()
    if (line == null || line.size() == 0) {
        return new SoInfo()
    }
    def sb = new StringBuilder()
    line.forEach({
        sb.append(it)
    })
    SoInfo soSolder = new JsonSlurper().parseText(sb.toString())
    return soSolder
}


/**
 * 生成完整的json 里面会带abi 这个需要放到intermediates/merged_assets/
 */
def getInfoJsonFull(List<SoInfo.SoInfoItem> itemList, String abi) {
    def json = new JsonBuilder()
    json {
        'armeabi'(abi)
        'time'(System.currentTimeMillis())
        'list'(itemList.collect({
            [
                    'name'   : it.name,
                    'md5'    : it.md5,
                    'version': it.version,
                    'size'   : it.size,
                    'url'    : it.url
            ]
        }))
    }
    return StringEscapeUtils.unescapeJava(json.toPrettyString())
}

/**
 * 生成完整的json 里面不带abi 这个需要放到 app下的assets目录
 */
def getInfoJsonWithoutAbi(List<SoInfo.SoInfoItem> itemList) {
    def json = new JsonBuilder()
    json {
        'time'(System.currentTimeMillis())
        'list'(itemList.collect({
            [
                    'name'   : it.name,
                    'md5'    : it.md5,
                    'version': it.version,
                    'size'   : it.size,
                    'url'    : it.url
            ]
        }))
    }
    println json
    return StringEscapeUtils.unescapeJava(json.toPrettyString())
}

/**
 * 重新写入SoInfo.json文件
 * 需要放到两个地方，一个是/src/main/assets下，还有一个是 /build/Intermediates/assets/$dirName/
 * 注意，在AGP 4.1 之后，
 * @param list 单个so的信息
 * @param abi 当前的arm架构
 * @param dirName 当前buildType以及flavors 对应的文件夹名称
 */
void writeJsonToAssets(List<SoInfo.SoInfoItem> list, String abi, String dirName) {
    def json = getInfoJsonWithoutAbi(list)
    writeJsonToFilePath(json, getAppDirPath() + "/src/main/assets/SoInfo.json")

    //在/build/Intermediates/compressed_assets/$dirName/out/assets下创建一个文件
    def intermediatesJson = getInfoJsonFull(list, abi)
    def dirPath = getAppDirPath() + "/build/intermediates/assets/${dirName}/merge${toUppercaseFirstOne(dirName)}Assets"
    def assetsFile = writeJsonToFilePath(intermediatesJson, "${dirPath}/SoInfo.json")
    def compressedAssetsPath = getAppDirPath() + "/build/intermediates/compressed_assets/$dirName/out/assets"
    // 放到compressed_assets下之后，还需要将其压缩，转成jar
    File zipFile = file("$compressedAssetsPath/SoInfo.json.jar")
    def tmpCompressedAssetsDir = file(compressedAssetsPath + "/assets")
    if (zipFile.exists()) {
        project.copy {
            from assetsFile
            into tmpCompressedAssetsDir
        }
        ZipUtils.compress(tmpCompressedAssetsDir.toString(), zipFile.toString())
        tmpCompressedAssetsDir.deleteDir()
    }
}


/**
 * 在指定位置写入文件
 * @param json
 * @param path
 */
File writeJsonToFilePath(String json, String path) {
    def jsonFile = file(path)
    jsonFile.createNewFile()
    jsonFile.write(json.toString())
    return jsonFile
}

/**
 * 获取当前编译的app目录
 * @return
 */
String getAppDirPath() {
    return project.rootProject.getRootDir().getAbsolutePath() + File.separator + project.name
}


/**
 * 将第一位的小写的字母换成大写
 * @param s
 * @return
 */
static String toUppercaseFirstOne(String s) {
    if (Character.isUpperCase(s.charAt(0)))
        return s
    else
        return (new StringBuilder()).append(Character.toUpperCase(s.charAt(0))).append(s.substring(1)).toString()
}

/**
 * 将第一位的大写的字母换成小写
 * @param s
 * @return
 */
static String toLowerCaseFirstOne(String s) {
    if (Character.isLowerCase(s.charAt(0)))
        return s
    else
        return (new StringBuilder()).append(Character.toLowerCase(s.charAt(0))).append(s.substring(1)).toString()
}

// so信息格式
class SoInfo {
    String armeabi = ""
    String time = 0
    List<SoInfoItem> list = new ArrayList<>()

    class SoInfoItem {
        String name = "" //so文件的名称
        String md5 = "" // so文件的hash
        long version = 1 // so文件的版本号，默认是1，也就是如果原先的so文件不存在，是这次加入的，则将其定义为1，如果hash有变，则需要对版本号做增加的处理
        long size = 0 // so文件的大小
        String url = ""// so 上传云端的地址
    }
}

/**
 * 压缩工具类
 */
class ZipUtils {

    static final int BUFFER = 8192

    /**
     * 压缩
     *
     * @param srcPath 待压缩路径
     * @param dstPath 压缩输出路径
     * @throws IOException
     */
    static void compress(String srcPath, String dstPath) throws IOException {
        File srcFile = new File(srcPath)
        File dstFile = new File(dstPath)
        if (!srcFile.exists()) {
            throw new FileNotFoundException(srcPath + "不存在！")
        }
        FileOutputStream out = null
        ZipOutputStream zipOut = null
        try {
            out = new FileOutputStream(dstFile)
            CheckedOutputStream cos = new CheckedOutputStream(out, new CRC32())
            zipOut = new ZipOutputStream(cos)
            String baseDir = ""
            compress(srcFile, zipOut, baseDir)
        } finally {
            if (null != zipOut) {
                zipOut.close()
                out = null
            }

            if (null != out) {
                out.close()
            }
        }
    }

    /**
     * 压缩
     *
     * @param file 待压缩File对象
     * @param zipOut ZipOutputStream对象
     * @param baseDir 压缩基础路径
     * @throws IOException
     */
    static void compress(File file, ZipOutputStream zipOut, String baseDir) throws IOException {
        if (file.isDirectory()) {
            compressDirectory(file, zipOut, baseDir)
        } else {
            compressFile(file, zipOut, baseDir)
        }
    }


    /**
     * 压缩目录
     *
     * @param dir 待压缩目录路径
     * @param zipOut ZipOutputStream对象
     * @param baseDir 压缩基础路径
     * @throws IOException
     */
    static void compressDirectory(File dir, ZipOutputStream zipOut, String baseDir) throws IOException {
        File[] files = dir.listFiles()
        for (int i = 0; i < files.length; i++) {
            compress(files[i], zipOut, baseDir + dir.getName() + "/")
        }
    }


    /**
     * 压缩文件
     *
     * @param file 待压缩File对象
     * @param zipOut ZipOutputStream对象
     * @param baseDir 压缩基础路径
     * @throws IOException
     */
    static void compressFile(File file, ZipOutputStream zipOut, String baseDir) throws IOException {
        if (!file.exists()) {
            return
        }
        BufferedInputStream bis = null
        try {
            bis = new BufferedInputStream(new FileInputStream(file))
            ZipEntry entry = new ZipEntry(baseDir + file.getName())
            zipOut.putNextEntry(entry)
            int count
            byte[] data = new byte[BUFFER]
            while ((count = bis.read(data, 0, BUFFER)) != -1) {
                zipOut.write(data, 0, count)
            }

        } finally {
            if (null != bis) {
                bis.close()
            }
        }
    }

}

